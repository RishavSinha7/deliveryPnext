// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  fullName              String
  email                 String   @unique
  phoneNumber           String   @unique
  password              String
  role                  UserRole @default(CUSTOMER)
  isActive              Boolean  @default(true)
  isEmailVerified       Boolean  @default(false)
  isPhoneVerified       Boolean  @default(false)
  profileImage          String?
  dateOfBirth           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // User profile details
  profile               UserProfile?
  
  // Driver specific details
  driverProfile         DriverProfile?
  
  // Customer specific details
  customerProfile       CustomerProfile?
  
  // Admin specific details
  adminProfile          AdminProfile?

  // Relations
  bookings              Booking[]
  notifications         Notification[]
  supportTickets        SupportTicket[]
  reviews               Review[]
  transactions          Transaction[]

  @@map("users")
}

model UserProfile {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  address               String?
  city                  String?
  state                 String?
  pincode               String?
  emergencyContactName  String?
  emergencyContactNumber String?
  languagesSpoken       String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("user_profiles")
}

model DriverProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aadhaarNumber         String   @unique
  licenseNumber         String   @unique
  experienceYears       Int
  isOnline              Boolean  @default(false)
  isVerified            Boolean  @default(false)
  rating                Float    @default(0)
  totalTrips            Int      @default(0)
  totalEarnings         Float    @default(0)
  walletBalance         Float    @default(0)
  
  // Documents
  licenseDocument       String?
  aadhaarDocument       String?
  profilePhoto          String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  vehicles              Vehicle[]
  trips                 Trip[]
  driverBookings        Booking[]

  @@map("driver_profiles")
}

model CustomerProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  preferredPaymentMethod String?
  defaultAddress        String?
  loyaltyPoints         Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("customer_profiles")
}

model AdminProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  department            String?
  permissions           Json?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("admin_profiles")
}

model Vehicle {
  id                    String       @id @default(cuid())
  driverProfileId       String
  driverProfile         DriverProfile @relation(fields: [driverProfileId], references: [id], onDelete: Cascade)
  
  vehicleType           VehicleType
  vehicleNumber         String       @unique
  vehicleModel          String
  yearOfManufacture     String
  insuranceNumber       String
  isActive              Boolean      @default(true)
  isVerified            Boolean      @default(false)
  
  // Documents
  registrationDocument  String?
  insuranceDocument     String?
  pollutionDocument     String?
  
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  // Relations
  trips                 Trip[]
  bookings              Booking[]

  @@map("vehicles")
}

model Booking {
  id                    String        @id @default(cuid())
  customerId            String
  customer              User          @relation(fields: [customerId], references: [id])
  driverId              String?
  driver                DriverProfile? @relation(fields: [driverId], references: [id])
  vehicleId             String?
  vehicle               Vehicle?      @relation(fields: [vehicleId], references: [id])
  
  bookingNumber         String        @unique
  serviceType           ServiceType
  status                BookingStatus @default(PENDING)
  
  // Pickup details
  pickupAddress         String
  pickupLatitude        Float
  pickupLongitude       Float
  pickupDateTime        DateTime
  
  // Drop-off details
  dropoffAddress        String
  dropoffLatitude       Float
  dropoffLongitude      Float
  estimatedDropoffTime  DateTime?
  actualDropoffTime     DateTime?
  
  // Pricing
  estimatedFare         Float
  actualFare            Float?
  discountAmount        Float         @default(0)
  commission            Float         @default(0)
  driverAmount          Float?
  
  // Additional details
  distance              Float?
  duration              Int?          // in minutes
  notes                 String?
  paymentMethod         PaymentMethod @default(CASH)
  paymentStatus         PaymentStatus @default(PENDING)
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  trip                  Trip?
  transactions          Transaction[]
  reviews               Review[]

  @@map("bookings")
}

model Trip {
  id                    String        @id @default(cuid())
  bookingId             String        @unique
  booking               Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  driverProfileId       String
  driverProfile         DriverProfile @relation(fields: [driverProfileId], references: [id])
  vehicleId             String
  vehicle               Vehicle       @relation(fields: [vehicleId], references: [id])
  
  status                TripStatus    @default(STARTED)
  startTime             DateTime      @default(now())
  endTime               DateTime?
  startLatitude         Float?
  startLongitude        Float?
  endLatitude           Float?
  endLongitude          Float?
  actualDistance        Float?
  actualDuration        Int?          // in minutes
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("trips")
}

model Transaction {
  id                    String            @id @default(cuid())
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  bookingId             String?
  booking               Booking?          @relation(fields: [bookingId], references: [id])
  
  transactionId         String            @unique
  type                  TransactionType
  amount                Float
  status                TransactionStatus @default(PENDING)
  paymentMethod         PaymentMethod
  description           String?
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("transactions")
}

model Review {
  id                    String   @id @default(cuid())
  bookingId             String
  booking               Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewerId            String
  reviewer              User     @relation(fields: [reviewerId], references: [id])
  
  rating                Int      // 1-5 stars
  comment               String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("reviews")
}

model Notification {
  id                    String             @id @default(cuid())
  userId                String
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title                 String
  message               String
  type                  NotificationType
  isRead                Boolean            @default(false)
  data                  Json?              // Additional notification data
  
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@map("notifications")
}

model SupportTicket {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  
  ticketNumber          String        @unique
  subject               String
  description           String
  status                TicketStatus  @default(OPEN)
  priority              TicketPriority @default(MEDIUM)
  category              String?
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("support_tickets")
}

// Enums
enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
  SUPER_ADMIN
}

enum VehicleType {
  BIKE
  AUTO
  CAR
  TRUCK
  VAN
  TEMPO
}

enum ServiceType {
  BIKE_DELIVERY
  AUTO_RIDE
  CAR_RIDE
  TRUCK_DELIVERY
  PACKERS_MOVERS
  INTERCITY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum TripStatus {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  COMMISSION
  WALLET_CREDIT
  WALLET_DEBIT
  EARNINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  DRIVER_ASSIGNED
  TRIP_STARTED
  TRIP_COMPLETED
  PAYMENT_RECEIVED
  GENERAL
  PROMOTIONAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
